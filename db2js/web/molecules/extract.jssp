
[%
	 /*
	  * 创建 molecule 定义  
	  */
 
	var path = request.getRealPath("molecules");

	logger.info('path = ' + path);

	var files = new java.io.File(path).listFiles();
	var defines = {};
	for(var i=0; i< files.length; i++){
		var file = files[i];
		if(file.name.endsWith(".html") || file.name.endsWith(".htm")){
			out.print("<h2>parse " + file.name + "</h2>");
			var document = org.jsoup.Jsoup.parse(file, "utf-8");
			var defs = document.select("[molecule-def]");
			out.print("<p>" + defs.size() + " molecule defs found</p>");
			if(defs.size() > 0){
				for(var j=0; j<defs.size(); j++){
					var element = defs.get(j);
					var fullname = element.attr("molecule-def");
					var module = 'noname', name = fullname;
					if(fullname.lastIndexOf('.') != -1){
						var p = name.lastIndexOf('.');
						module = name.substring(0, p);
						name = name.substr(p + 1);
					}
					var depends = element.attr("molecule-depends") || '';
					
					out.print("<h3>find " + fullname + "</h3>");
					element.removeAttr('molecule-def');
					element.removeAttr('molecule-depends');
					
					var html = element.outerHtml();
					if(defines[module] == null) defines[module] = {};
					if(defines[module][name] != null){
						printError(fullname + ' defined more than one time');
					}
					var def = {name : name, module : module, depends : depends && depends.split(','), 
		                         tagName : element.tagName(), html : html};
					var n = element.nextElementSibling();
					if(n && n.tagName() == 'script' && (n.attr('molecule-for') == fullname || n.attr('molecule-for') == name)){
						def.script = n.innerHTML;
					}
					defines[module][name] = def;
				}
			} else {
				out.print("<h3>(empty)</h3>");
			}
		}
	}
	
	for(var module in defines){ if(defines.hasOwnProperty(module)){
		var path = request.getRealPath("molecules/" + module +  ".json");
		logger.debug('write molecule module : ' +  path);
		org.apache.commons.io.FileUtils.write(new java.io.File(path), JSON.stringify(defines[module]), "utf-8");
	}}
	
	
	function printError(error){
		out.print('<p class="error">' + error + '</p>');
	}
%]